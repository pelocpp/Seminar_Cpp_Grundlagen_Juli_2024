==================================================

Guten Morgen

C++ Einführung
--------------

Peter Loos

peter.loos@gmx.de

==================================================

2 Gruppen

== Entwickler
== Tester

== C++ Einführung
== C++-API ==>  C++ SW Verwendung 

Zugang zu Modem

== C-API

==================================================

Visual Studio:

Beispiel: Allgemein gültig

==================================================

A) Einführung 

B) Quellcode des Qualcomm APIs lesen und verstehen und erklären

   Factory // Referenzen // Schnittstelle

   Aufräumen eines Callback // Scope des Funktionen

   Design Pattern:  Factory // Interfaces ...

C) Was MUSS DRIN SEIN:

   Darf auch später kommen ............................


Hausaufgabe:

peter.loos@gmx.de

3 bis 5 Links: Dateien


==================================================

2 Tools:

== Visual Studio
== Github.com

https://github.com/pelocpp

https://github.com/pelocpp/cpp_introduction

==================================================

Visual Studio Community 2022

===>  Workload "Desktop Development with C++"


Beispiele:

https://git.codelinaro.org/clo/le/platform/vendor/qcom-opensource/snaptel-sdk/-/blob/LE.UM.7.4.1.r1-17700-sa525m-tele/apps/samples/phone/make_call_app/MakeCall.cpp

https://git.codelinaro.org/clo/le/platform/vendor/qcom-opensource/snaptel-sdk/-/blob/LE.UM.7.4.1.r1-17700-sa525m-tele/apps/samples/phone/network_scan_app/NetworkApp.cpp


Gefunden:

https://git.codelinaro.org/clo/le/platform/vendor/qcom-opensource/snaptel-sdk/-/blob/LE.UM.7.4.1.r1-17700-sa525m-tele/include/telux/tel/PhoneFactory.hpp

https://git.codelinaro.org/clo/le/platform/vendor/qcom-opensource/snaptel-sdk/-/blob/LE.UM.7.4.1.r1-17700-sa525m-tele/simulation/libs/audio/AudioFactoryImpl.cpp



===================================================================

cout:: Console Output

 <<=====   Pfeils


 endl:  end of line

 A) Korrekt  :   Grammatik  // Lexikon  ==> Compiler // Übersetzer

    --->   .OBJ  // .O

 B) Maschinencode:   Build  // Linker

    ---->  .EXE  // keine Endung

=============================================================

==> Klassen und Objekte

==> C:  struct   ====> DATEN

struct Person
{
    int age;             // int // size_t
    char firstName[32];
    char lastName[32];   // 
    
    size_t plz;
    char wohnort[32];   // 
};

Datentyp  (int, double)

Benutzer-definiert

Funktionen: Die auf DATEN OPERIEREN.

Funktionen:  Die Person zieht um

changeAdress:  Name einer Funktion

// ----------
Es gibt KEINE MÖGLICHKEIT, die Struktur (Person) und die Funktion (changeAdress)
in einem gemeinsamen Konstrukt hinzuschreiben.
// ----------

struct Person hans;   // Variable dieses Strukturtyps

// Funktion, die eine Person als PARAMETER hat
changeAdress (struct Person* person, size_t newPLZ, char* neuerWohnort);

=========================================

==============>  Strukturen und Funktionen ====> OO: Klasse

                 Klasse: Vereint Funktionen und Daten in einem GEMEINSAMEN Konstrukt

C:   NUR Strukturen und Funktionen // KEINE Klassen

C++:  Klassen

================================================

Java, C#,  Python, 

Wir schreibe ich eine Klasse in C++:

In ZWEI Dateien.

Uhrzeiten:   Stunden, Minuten, Sekunden

"nächsteSekunde, ausgeben, vergleichen, auf Null setzen, ..."

====================================================

Klasse:   Beschreibung von Daten und Funktionen (Methoden)

Objekt:   "Variable einer Klasse" // Synonym:  Instanz

Variablen einer Struktur // Variablen eines Objekts:

Instanzvariablen // Membervariablen // (Objektvariable) 

     member ==> m_    Konvention 

Methode:    "Funktion"

=======================================================

Mittagessen:  12.30 bis ca. 13.15

=======================================================

Alternative:  Wandbox.org

https://wandbox.org/

Zum Ausprobieren ..................

Oder auch:

https://www.online-cpp.com/

=======================================================

Bemerkung:

C ist in C++ enthalten ... KOMPLETT (99%).

=======================================================

Paradigma // Idiom:

== Kapselung // Schutz der Daten 

    now.m_hours = 999;    Das soll NICHT gehen

== Ein Objekt soll / muss zu jedem Zeitpunkt seines Lebens

   KORREKTE Daten enthalten.

>> Zugriffsschutz:

a) Instanzvariablen sollten private sein:

   "Von außen" kein Zugriff möglich !!!

b) Zugriff:   Über Methoden:

   setter / getter


   Diese MÜSSEN die Sinnhaftigkeit ihrer Parameter überprüfen !!!

   Können den Status eines Objekts verändern / lesen

   Während der Lebenszeit eines Objekts

====================================================

Ein Objekt bei seiner Erzeugung vorbelegen:

== Spezielle Methoden:  Konstruktoren (sie "konstruieren" das Objekt)

== Beim Entstehen eines Objekts !!!

== ZWEI Unterschiede zu einer regulären Methode:

   a) Name: Identisch mit dem Namen der Klasse
   b) Rückgabetyp: KEINER (auch nicht void)



WICHTIG !!!!!!!!!!

Vorbelegen:

Speicher dynamisch allokieren : NICHT IM KONSTRUKTOR

Verbindungsaufbau:  NICHT IM KONSTRUKTOR

     Eine Ausnahme werfen.

    bool m_active; 
    bool m_valid;   // false


====================================================


Der this-Zeiger

this kann als Argument NUR Instanz-Variablen (Methoden) haben.

Eine Anwendung:

Auflösung von Konflikten (lokale Variable (Parameter) vs Instanz-Variable)


    this->milliseconds = milliseconds;
00007FF69E672524  mov         rax,qword ptr [this]  
00007FF69E67252B  mov         ecx,dword ptr [milliseconds]  
00007FF69E672531  mov         dword ptr [rax+0Ch],ecx  

    milliseconds = msecs;
00007FF79BE72524  mov         rax,qword ptr [this]  
00007FF79BE7252B  mov         ecx,dword ptr [msecs]  
00007FF79BE72531  mov         dword ptr [rax+0Ch],ecx  

====================================================

“prozedurale” Programmierung_

Ist C-Programmierung.



====================================================


https://wandbox.org/


Visual Studio:

== Projekt anlegen können

== Klasse, Objekt

== getter / setter

== Methoden

https://github.com/pelocpp/cpp_introduction/blob/master/Cpp_Introduction/Exercises/Exercises_BankAccount.md

